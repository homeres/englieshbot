# file: english_bot_webhook.py
import os
import json
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìò –ì–î–ó"), KeyboardButton("üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")],
        [KeyboardButton("üìö –¢–µ–º–∞ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–∫–∞")],
        [KeyboardButton("‚è∞ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è"), KeyboardButton("üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–î–ó"), KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –î–ó")],
        [KeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"), KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é")],
        [KeyboardButton("üîô –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
admin_state = {}
temp_storage = {}

# --- –î–∞–Ω–Ω—ã–µ ---
DATA_FILE = "data.json"
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"gdz": None, "dz": "–ü–æ–∫–∞ –Ω–µ—Ç", "tema": "–ü–æ–∫–∞ –Ω–µ—Ç", "test_date": None}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ ---
last_bot_message = {}

async def send_and_delete_old(message: Message, text=None, photo=None, caption=None, keyboard=None):
    chat_id = message.chat.id
    if chat_id in last_bot_message:
        try:
            await bot.delete_message(chat_id, last_bot_message[chat_id])
        except:
            pass
    if photo:
        msg = await message.answer_photo(photo, caption=caption, reply_markup=keyboard)
    else:
        msg = await message.answer(text, reply_markup=keyboard)
    last_bot_message[chat_id] = msg.message_id

# --- –ê–¥–º–∏–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞ ---
def is_admin(user_id):
    return user_id == ADMIN_ID

# --- –ö–æ–º–∞–Ω–¥—ã /start ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await send_and_delete_old(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç 7–ê –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É üá¨üáß", keyboard=main_kb)

@dp.message(F.text == "/admin")
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await send_and_delete_old(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ ‚ùå")
    await send_and_delete_old(message, "–ê–¥–º–∏–Ω-–º–µ–Ω—é:", keyboard=admin_kb)

# --- –£—á–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@dp.message(F.text == "üìò –ì–î–ó")
async def show_gdz(message: Message):
    if data["gdz"]:
        await send_and_delete_old(message, photo=data["gdz"]["photo"], caption=data["gdz"].get("text",""))
    else:
        await send_and_delete_old(message, "–ì–î–ó –ø–æ–∫–∞ –Ω–µ—Ç üì≠")

@dp.message(F.text == "üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def show_dz(message: Message):
    await send_and_delete_old(message, f"üìå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{data['dz']}")

@dp.message(F.text == "üìö –¢–µ–º–∞ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–∫–∞")
async def show_tema(message: Message):
    await send_and_delete_old(message, f"üìö –¢–µ–º–∞ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–∫–∞:\n{data['tema']}")

@dp.message(F.text == "‚è∞ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è")
async def show_test(message: Message):
    if data["test_date"]:
        await send_and_delete_old(message, f"üì¢ –ë–ª–∏–∂–∞–π—à–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è: {data['test_date']}")
    else:
        await send_and_delete_old(message, "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–æ–∫–∞ –Ω–µ—Ç ‚úÖ")

@dp.message(F.text == "üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
async def show_links(message: Message):
    await send_and_delete_old(
        message,
        "üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
        "- <a href='https://dictionary.cambridge.org/'>Cambridge Dictionary</a>\n"
        "- <a href='https://quizlet.com/'>Quizlet</a>\n"
        "- <a href='https://www.bbc.co.uk/learningenglish'>BBC Learning English</a>\n"
    )

# --- –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–î–ó")
async def admin_add_gdz(message: Message):
    if not is_admin(message.from_user.id):
        return
    admin_state[message.from_user.id] = "add_gdz"
    await send_and_delete_old(message, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ì–î–ó üì∏", keyboard=admin_kb)

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –î–ó")
async def admin_set_dz(message: Message):
    if not is_admin(message.from_user.id):
        return
    admin_state[message.from_user.id] = "set_dz"
    await send_and_delete_old(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è üìù", keyboard=admin_kb)

@dp.message(F.text == "üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
async def admin_set_tema(message: Message):
    if not is_admin(message.from_user.id):
        return
    admin_state[message.from_user.id] = "set_tema"
    await send_and_delete_old(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–∫–∞ üìö", keyboard=admin_kb)

@dp.message(F.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é")
async def admin_set_test(message: Message):
    if not is_admin(message.from_user.id):
        return
    admin_state[message.from_user.id] = "set_test"
    await send_and_delete_old(message, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.09.2025) ‚è∞", keyboard=admin_kb)

@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_menu(message: Message):
    admin_state.pop(message.from_user.id, None)
    await send_and_delete_old(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é:", keyboard=main_kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(F.photo)
async def handle_photo(message: Message):
    if not is_admin(message.from_user.id):
        return
    action = admin_state.get(message.from_user.id)
    if action == "add_gdz":
        file_id = message.photo[-1].file_id
        temp_storage[message.from_user.id] = file_id
        admin_state[message.from_user.id] = "add_gdz_text"
        await send_and_delete_old(message, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ì–î–ó? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚úèÔ∏è (–∏–ª–∏ '–Ω–µ—Ç')", keyboard=admin_kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
@dp.message()
async def handle_text(message: Message):
    if not is_admin(message.from_user.id):
        return
    action = admin_state.get(message.from_user.id)
    if not action:
        return

    if action == "set_dz":
        data["dz"] = message.text
        save_data(data)
        admin_state.pop(message.from_user.id)
        await send_and_delete_old(message, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", keyboard=admin_kb)

    elif action == "set_tema":
        data["tema"] = message.text
        save_data(data)
        admin_state.pop(message.from_user.id)
        await send_and_delete_old(message, "–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", keyboard=admin_kb)

    elif action == "set_test":
        data["test_date"] = message.text
        save_data(data)
        admin_state.pop(message.from_user.id)
        await send_and_delete_old(message, f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {message.text} ‚úÖ", keyboard=admin_kb)

    elif action == "add_gdz_text":
        file_id = temp_storage.pop(message.from_user.id)
        text = "" if message.text.lower() == "–Ω–µ—Ç" else message.text
        data["gdz"] = {"photo": file_id, "text": text}  # —Å—Ç–∞—Ä–æ–µ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è
        save_data(data)
        admin_state.pop(message.from_user.id)
        await send_and_delete_old(message, "–ì–î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ", keyboard=admin_kb)

# --- Webhook endpoint ---
async def handle(request):
    body = await request.json()
    update = bot.parse_update(body)
    await dp.process_update(update)
    return web.Response(text="OK")

app = web.Application()
app.router.add_post(f"/{TOKEN}", handle)

# --- –ó–∞–ø—É—Å–∫ (Render —Å–∞–º –¥–∞—ë—Ç HTTPS) ---
if __name__ == "__main__":
    import aiohttp
    import asyncio

    port = int(os.getenv("PORT", 10000))
    web.run_app(app, port=port)
